import "LazyVec.met"

#~
~#
class LazyMat[ ST = SizeType, default_value = 0 ]
    property is_a_LazyMat
    static const PLO := PtrWithCptUse[ LazyMatPart[ ST ] ]
    
    sub_blocks    := Vec[ VecSparse[ PLO, default_value = PLO( NULL ) ] ]()
    block_offsets := Vec[ Vec[ST], 2 ]( [ [0], [0] ] )
    
    #
    def init( nb_rows, nb_cols, T, function ) pertinence -1
        init( nb_row_blocks = 1, nb_col_blocks = 1 )
        sub_blocks[0][0] = new_LazyMatPartFunctionnal( T, ST, nb_rows, nb_cols, function )
    
    #
    def init( nb_row_blocks, nb_col_blocks ) pertinence -1
        init_using_default_values( self )
        sub_blocks.resize( nb_row_blocks )
        for i in 0 .. nb_row_blocks
            sub_blocks[i].size = nb_col_blocks
        
    #
    def set_sub_block( row_offset, col_offset, lazy_mat_part )
        # resize sub_blocks if necessary
        if block_offsets[ 0 ].back <= row_offset
            if block_offsets[ 0 ].back < row_offset
                block_offsets[ 0 ].push_back( row_offset )
            block_offsets[ 0 ].push_back( row_offset + lazy_mat_part->nb_rows )
        if block_offsets[ 1 ].back <= col_offset
            if block_offsets[ 1 ].back < col_offset
                block_offsets[ 1 ].push_back( col_offset )
            block_offsets[ 1 ].push_back( col_offset + lazy_mat_part->nb_cols )
        sub_blocks.size = block_offsets[ 0 ].size - 1
        for v in sub_blocks
            v.size = block_offsets[ 1 ].size - 1
        # find big_r and big_c
        big_r := block_offsets[0].index_of_first_item_equal_to( row_offset, -1 )
        big_c := block_offsets[1].index_of_first_item_equal_to( col_offset, -1 )
        assert( big_r>=0 and big_c>=0, "TODO : non concordant block update..." )
        assert( block_row_size( big_r )==lazy_mat_part->nb_rows and block_col_size( big_c )==lazy_mat_part->nb_cols, "TODO : non concordant block update..." )
        sub_blocks[big_r][big_c] = lazy_mat_part
    
    #
    def block_row_size( big_r )
        return block_offsets[0][big_r+1]-block_offsets[0][big_r]
    
    #
    def block_col_size( big_c )
        return block_offsets[1][big_c+1]-block_offsets[1][big_c]
    
    # append sub lazy objects to scheduler
    def apply_lazy_objects( op )
        for s in sub_blocks
            for v in s.values
                op( v.ptr )
    
    #
    def select( i, j )
        # stack_info()
        i_ := i; j_ := j
        sb := sub_block_for_rc_( i_, j_ )
        if not sb
            return default_value
        if not sb->done
            ls := LazySimpleScheduler( [ sb.ptr ] ); ls.execute()
        return sb->select( i_, j_ )
    
    #
    def sub_block_for_rc_( i, j )
        r := 0; c := 0
        while i >= block_offsets[ 0 ][ r + 1 ]
            r++
        while j >= block_offsets[ 1 ][ c + 1 ]
            c++
        i -= block_offsets[ 0 ][ r ]
        j -= block_offsets[ 1 ][ c ]
        return sub_blocks[ r ][ c ]

    #
    def get_nb_rows
        return block_offsets[0].back

    #
    def get_nb_cols
        return block_offsets[1].back

    #
    def write_to_stream( stream )
        res := Mat[String]( nb_rows, nb_cols )
        for i in 0 .. nb_rows
            for j in 0 .. nb_cols
                res[ i,j ] = select(i,j)
        ms := Vec[ Int32 ]( size = nb_cols )
        for j in 0 .. nb_cols
            ms[ j ] = max( res.col( j ).map( x => x.size ) ) + 1
        #
        for i in 0 .. nb_rows
            for j in 0 .. nb_cols
                stream << res[i,j] << " " * ( ms[j] - res[i,j].size )
            stream <<< ""

    #
    def get_diag
        res := LazyVec()
        for big_r in 0 .. sub_blocks.size
            for ind, data in sub_blocks[big_r].indices, sub_blocks[big_r].values
                beg := max( block_offsets[0][big_r  ], block_offsets[1][ind  ] )
                end := min( block_offsets[0][big_r+1], block_offsets[1][ind+1] )
                if end > beg
                    res.sub_vecs.push_back( data->diag_extraction( block_offsets[0][big_r  ] - beg, block_offsets[1][ind  ] - beg, end - beg ) )
        return res

    # Ex : if sub_blocks[i][j] contains Float32 and Float64 types, returns Float64
    def get_best_type
        res := InternalVariable()
        for s in sub_blocks
            for v in s.values
                if not res
                    res.init_using_var( v->get_ScalarType() )
                else
                    res.init( type_promote( partial_instanciation @res, v->get_ScalarType(), add ) )
        return @res
    
# --------------------------------------------------------------------------------------------------------------------------------

#~
~#
class LazyMatPart[ ST ] inherits LazyObjectAncestor
    nb_rows := ST( 0 )
    nb_cols := ST( 0 )

    virtual def select( i, j )
        abstract

    virtual def mul_vec( vec_sub_part, offset_mat, offset_vec, cs, NST )
        abstract
    
    virtual def get_ScalarType
        abstract
        
    virtual def diag_extraction( beg_row, beg_col, size )
        abstract

    virtual def chol( incomplete )
        abstract
    
    virtual def solve_tri( sub_vec, mat_offset, vec_offset, inf )
        abstract
    
import "LazyMatPartFull.met"
import "LazyMatPartSparse.met"
import "LazyMatPartFunctionnal.met"
    

# --------------------------------------------------------------------------------------------------------------------------------

#~  Matrix * Vector ~#
def mul( M, V ) when M.is_a_LazyMat and V.is_a_LazyVec
    ST := type_promote( partial_instanciation M.ST, partial_instanciation V.ST, add )

    # 
    nb_cb := M.block_offsets[1].size - 1
    corr := Vec[ Vec[ Quadrinom[ ST, ST, ST, ST ] ] ]( size = nb_cb )
    for i0, i1, b0, b1, cs in BiLazyVecItemExplorer_(
        nb_cb, M.block_col_size, 
        V.sub_vecs.size, V.size_sub_vec
    )
        corr[ i0 ].push_back( i1, b0, b1, cs )
    #
    res := LazyVec[ ST ]()
    for r in 0 .. M.sub_blocks.size
        tmp := PtrWithCptUse[ LazyVecPartAncestor[ST] ]( NULL )
        for i0, sb in M.sub_blocks[r].indices, M.sub_blocks[r].values
            for c in corr[ i0 ]
                i1 := c.first; b0 := c.second; b1 := c.third; cs := c.fourth
                mt := sb->mul_vec( V.sub_vecs[ i1 ], b0, b1, cs, ST )
                if tmp
                    tmp = new_LazyVecPartBinaryOperator( ST, tmp, mt, 0, 0, tmp->size, Add() )
                else
                    tmp = mt
        res.sub_vecs.push_back( tmp )
    return res


#~  Matrix * Matrix ~#
def mul( M, N ) when M.is_a_LazyMat and N.is_a_LazyMat
    ST := type_promote( partial_instanciation M.ST, partial_instanciation N.ST, add )
    res := LazyMat[ ST ]()
    for r in 0 .. M.sub_blocks.nb_rows
        tmp := PtrWithCptUse[ LazyVecPart[T,ST] ]( NULL )
        for i0, i1, b0, b1, cs in BiLazyVecItemExplorer_(
            M.sub_blocks.nb_cols, M.nb_cols_sub_block, 
            V.sub_vecs.size, V.size_sub_vec
        )
            if M.sub_blocks[ r, i0 ]
                mt := M.sub_blocks[ r, i0 ]->mul_vec( V.sub_vecs[ i1 ], b0, b1, cs, ST )
                if tmp
                    tmp = new_LazyVecPartOperatorGen( T, T, ST, tmp, mt, 0, 0, tmp->size, Add() )
                else
                    tmp = mt
        res.sub_vecs.push_back( tmp )
    return res
    
# -------------------------------------------------------------------------------------------------------------------------------------
#
class LazyChol[ ST ]
    property is_a_LazyChol
    
    c := LazyMat[ ST ]()

    def write_to_stream( stream )
        res := Mat[String]( c.nb_rows, c.nb_cols )
        for i in 0 .. c.nb_rows
            for j in 0 .. i + 1
                res[ i,j ] = c.select(i,j)
        ms := Vec[ Int32 ]( size = c.nb_cols )
        for j in 0 .. c.nb_cols
            ms[ j ] = max( res.col( j ).map( x => x.size ) ) + 1
        #
        for i in 0 .. c.nb_rows
            for j in 0 .. c.nb_cols
                stream << res[i,j] << " " * ( ms[j] - res[i,j].size )
            stream <<< ""
    

#
def chol( m, incomp = false ) when m.is_a_LazyMat
    res := LazyChol[ m.ST ]()
    res.c.sub_blocks.resize( m.sub_blocks.size )
    res.c.block_offsets = m.block_offsets
    for br in 0 .. m.sub_blocks.size
        for ind, val in m.sub_blocks[br].starting_from_first_nz_value( up_to = br + 1 )
            b := child_cast( val )
            for ind_l, val_c, val_r in common_nz( res.c.sub_blocks[ind], res.c.sub_blocks[br] )
                val_ := res.c.sub_blocks[ ind ][ ind_r ]
                b = chol_sub( b, child_cast( val_r ), child_cast( val_c ), incomp )
            if ind == br
                if b
                    b = b->chol( incomp )
            else
                b = chol_sub( b, child_cast( m.sub_blocks[ ind ][ ind ] ), incomp )
            res.c.sub_blocks[br].indices.push_back( ind )
            res.c.sub_blocks[br].values .push_back(  b  )
        # for ic in 0 .. m.sub_blocks[br].indices.size
            # bc := m.sub_blocks[br].indices[ic]
            # # diag
            # if bc == br
                # res.c.sub_blocks[br].indices.push_back( bc )
                # res.c.sub_blocks[br].values .push_back( 
                    # m.sub_blocks[br].values[ ic ]->chol( res.c.sub_blocks[bc], res.c.sub_blocks[br], bc, incomp )
                # )
            # not diag
            # else
    return res

#
def mul( ch, v ) when ch.is_a_LazyChol and v.is_a_LazyVec
    ST := type_promote( partial_instanciation ch.ST, partial_instanciation v.ST, add )
    res := LazyVec[ ST ]()
    assert( v.sub_vecs.size == 1 and v.size >= ch.c.nb_rows, "TODO -> tri_solve with several sub_vecs" )
    
    # L
    for r in 0 .. ch.c.sub_blocks.size
        tmp := PtrWithCptUse[ LazyVecPartAncestor[ ST ] ]( v.sub_vecs[0] )
        for ind, val in ch.c.sub_blocks[r].indices, ch.c.sub_blocks[r].values
            if ind == r
                res.sub_vecs.push_back( val->solve_tri( tmp, 0, ch.c.block_offsets[0][r], inf = true ) )
            else
                assert( 0, "TODO -> M*V in tri solve" )
    
    # L^T
    sol := LazyVec[ ST ]()
    for s in res.sub_vecs
        sol.sub_vecs.push_back( s )
    
    for r in ( 0 .. ch.c.sub_blocks.size ).reversed
        for ind, val in ch.c.sub_blocks[r].indices, ch.c.sub_blocks[r].values
            if ind == r
                sol.sub_vecs[r] = val->solve_tri( sol.sub_vecs[r], 0, 0, inf = false )
            else
                assert( 0, "TODO -> M*V in tri solve" )
    return sol
    
