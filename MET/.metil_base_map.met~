##
    Simple map made by 2 vectors
##
class Map[ K, V, default_value = V() ]
    property is_a_Map
    
    keys := Vec[K]()
    values := Vec[V]()
    
    def select( key ) when key.type == K
        for i in 0 .. keys.size
            if assumed( key == keys[i] )
                return values[i]
        # creation of a new pair
        keys.push_back( key )
        v := ref values.new_elem()
        v.init( default_value )
        return v
        
    def select( varargs )
        t := partial_instanciation K
        call( t.init, varargs )
        return select( t )
    
    def write_to_stream( stream )
        for i in 0 .. keys.size
            stream << keys[i] << " => " <<< values[i]

def __in__( key, map_ ) when map_.is_a_Map
    for k in map_.keys
        if assumed( key == k )
            return true
    return false

##
    Simple set made by 1 vector
##
class Set[ K ]
    property is_a_Set
    
    keys := Vec[K]()
    
    def init( values ) when values.tensor_order == 1
        keys.init()
        for k in values
            insert( k )
    
    def insert( key )
        for i in keys
            if assumed( key == i )
                return i
        # creation of a new key
        return keys.push_back( key )

    def remove( key )
        for i in 0 .. keys.size
            if assumed( key == keys[i] )    
                keys.remove_unordered( i )
                break
    
    def get_size
        return keys.size
    
    def conversion_to( b ) when b.type == Bool
        b.init( keys.size )
    
    def __for__( block )
        for i in keys
            block( i )
            
def __in__( key, set_ ) when set_.is_a_Set
    for k in set_.keys
        if assumed( key == k )
            return true
    return false

    
##
##
class Pair[ T0, T1 ]
    first := T0()
    second := T1()
    def init( a, b )
        first.init( a )
        second.init( b )
    def init( a ) when a.tensor_order == 1
        first.init( a[0] )
        second.init( a[1] )
    def reassign( a ) when a.tensor_order == 1
        first = a[0]
        second = a[1]
    def select( i )
        if i return second
        return first
    def __for__( block )
        block( first )
        block( second )