
#~

~#
class ReferenceElement[ nb_var_inter ]
    static const vtk_type := -1 # -> -1 means no vtk representation
    class Child[ NE, TVI ]
        elem := NE()
        var_inter := Vec[ TVI ]()
    
    def child( NE, var_inter )
        return Child[ NE, var_inter.sub_type ]( var_inter = var_inter )
        
    def point_is_in_children( child_var_inter, child, pos )
        obj := norm_2_square( pos - child.var_inter )
        sol_child_var_inter := newton_raphson_minimize_iteration( obj, child_var_inter )
        dist := obj.subs( child_var_inter, sol_child_var_inter )
        return assumed( dist < 1e-6 )
    
    def integration( expr, var_inter, max_der = 50 )
        res := scalar_conversion( Op, expr )
        interval_var_inter := ref interval_var_inter( var_inter ) 
        for i in ( 0 .. nb_var_inter ).reversed
            res = integration( res, var_inter[i], interval_var_inter[i][0], interval_var_inter[i][1], max_der )
        return res
        
#~
~#
class ReferenceElementPoint inherits ReferenceElement[ nb_var_inter = 0 ]
    static const vtk_type := 1
    def interval_var_inter( vi ) 
        return []
    def children( vi )
        return []

#~
~#
class ReferenceElementBar inherits ReferenceElement[ nb_var_inter = 1 ]
    static const vtk_type := 3
    def interval_var_inter( vi ) 
        return [ [0,1] ]
    def children( vi )
        return [
            child( ReferenceElementPoint, [0] ),
            child( ReferenceElementPoint, [1] )
        ]
     
#~
~#
class ReferenceElementTriangle inherits ReferenceElement[ nb_var_inter = 2 ]
    static const vtk_type := 5
    def interval_var_inter( vi ) 
        return [ [0,1], [0,1-vi[0]] ]
    def children( vi )
        return [
            child( ReferenceElementBar, [ vi[0]  , 0       ] ),
            child( ReferenceElementBar, [ 1-vi[0], vi[0]   ] ),
            child( ReferenceElementBar, [ 0      , 1-vi[0] ] )
        ]
    
#~
~#
class ReferenceElementQuad inherits ReferenceElement[ nb_var_inter = 2 ]
    static const vtk_type := 9
    def interval_var_inter( vi ) 
        return [ [0,1], [0,1] ]
    def children( vi )
        return [
            child( ReferenceElementBar, [ vi[0]  , 0       ] ),
            child( ReferenceElementBar, [ 1      , vi[0]   ] ),
            child( ReferenceElementBar, [ 1-vi[0], 1       ] ),
            Child( ReferenceElementBar, [ 0      , 1-vi[0] ] )
        ]
    
#~
~#
class ReferenceElementTetra inherits ReferenceElement[ nb_var_inter = 3 ]
    static const vtk_type := -1
    def interval_var_inter( vi ) 
        return [ [0,1], [0,1-vi[0]], [0,1-vi[0]-vi[1]] ]
    def children( vi )
        assert(0,"pouet")
        # return [
            # child( ReferenceElementBar, [ vi[0]  , 0       ] ),
            # child( ReferenceElementBar, [ 1-vi[0], vi[0]   ] ),
            # child( ReferenceElementBar, [ 0      , 1-vi[0] ] )
        # ]


