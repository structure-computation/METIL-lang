import "SymbolicElement.met"

class NameElement
    static def get_nb_nodes
        return points.size
    static def get_nvi
        return points[0].size
    # return true if node number $node_number is a vertex in self
    # Example : Bar 0 -- 1 -- 2 -- 3 return true false false true for respectively 0 1 2 3
    static def node_number_is_a_vertex( node_number )
        p := points[ node_number ]
        r := interval_var_inter( p )
        s := 0
        for coord_p, coord_r in p, r
            s += Bool( sum( coord_p == coord_r ) )
        return s == nvi
    static def point_is_a_vertex( p )
        r := interval_var_inter( p )
        s := 0
        for coord_p, coord_r in p, r
            s += Bool( sum( coord_p == coord_r ) )
        return s == nvi
    static def point_is_on_edge( p )
        r := interval_var_inter( p )
        s := 0 
        for coord_p, coord_r in p, r
            s += Bool( sum( coord_p == coord_r ) )
        if s == 0
            return false
        else
            return true
    static def corr_cpp( num_node ) pertinence 0
        return num_node
    
# 0
class NodalElement inherits NameElement
    static def get_nb_nodes pertinence 2 return 1
    static def get_nvi      pertinence 2 return 0
    static points   := [[]]
    static children := []
    static def interval_var_inter( vi )
        return [ [], [] ]
    static def get_order_interpolation
        return [ 0 ]
    static def get_upper_degree_points( n )
        points_new   := [[]]
        return points_new

# 0 -- 1
class Bar inherits NameElement
    static vtk_num  := 3
    static points   := [[0],[1]]
    static children := [(NodalElement,[0]),(NodalElement,[1])]
    static def interval_var_inter( vi )
        return [ [0,1] ]
    static def get_order_interpolation
        return [ 1 ]
    static def get_upper_degree_element( n )
        return BarGeneric[ n ]
    static def get_upper_degree_points( n )
        points_new   := Vec[ Vec[ Rationnal, 1 ] ]()
        for i in 0 .. n+1
            points_new.push_back( [ i/n ] )
        return points_new
    static def gauss_integration( expr, order, var_inter )
        # order = 2 * nb_pts_gauss - 1
        if order <= 1 # nb_pts_gauss = 1
            nb_pts_gauss := 1
            # val := [ 1/2 ]
            # pond := [ 1 ]
            val := [ 0.5 ]
            pond := [ 1.0 ]
            res  := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 3 # nb_pts_gauss = 2
            nb_pts_gauss := 2
            # val := [ ( 1 - sqrt( Float96(1/3) ) ) / 2, ( 1 + sqrt( Float96(1/3) ) ) / 2 ]
            # pond := [ 1/2, 1/2 ]
            val := [ 0.211324865405187, 0.788675134594813 ]
            pond := [ 0.5, 0.5 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 5 # nb_pts_gauss = 3
            nb_pts_gauss := 3
            # val := [ ( 1 - sqrt( Float96(3/5) ) ) / 2, 1/2, ( 1 + sqrt( Float96(3/5) ) ) / 2 ]
            # pond := [ (5/9) / 2, (8/9) / 2, (5/9) / 2 ]
            val := [ 0.112701665379258, 0.5, 0.887298334620742 ]
            pond := [ 0.277777777777778, 0.444444444444444, 0.277777777777778 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 7 # nb_pts_gauss = 4
            nb_pts_gauss := 4
            # val := [ ( 1 - sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 - sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2 ]
            # pond := [ ((18 - sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 - sqrt(Float96(30)))/36) / 2 ]
            val := [ 0.069431844202974, 0.330009478207572, 0.669990521792428, 0.930568155797026 ]
            pond := [ 0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 9 # nb_pts_gauss = 5
            nb_pts_gauss := 5
            # val := [ ( 1 - 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 - 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, 1/2, ( 1 + 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 + 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2 ]
            # pond := [ ((322 - 13 * sqrt(Float96(70)))/900) / 2, ((322 + 13 * sqrt(Float96(70)))/900) / 2, (128/225) / 2, ((322 + 13 * sqrt(Float96(70)))/900) / 2, ((322 - 13 * sqrt(Float96(70)))/900) / 2 ]
            val := [ 0.046910077030668, 0.230765344947159, 0.5, 0.769234655052841, 0.953089922969332 ]
            pond := [ 0.118463442528095, 0.239314335249683, 0.284444444444444, 0.239314335249683, 0.118463442528095 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 11 # nb_pts_gauss = 6
            nb_pts_gauss := 6
            # val := [ ( 1 - 0.932469514203152 ) / 2, ( 1 - 0.661209386466265 ) / 2, ( 1 - 0.238619186083197 ) / 2, ( 1 + 0.238619186083197 ) / 2, ( 1 + 0.661209386466265 ) / 2,  ( 1 + 0.932469514203152 ) / 2 ]
            # pond := [ 0.171324492379170 / 2, 0.360761573048139 / 2, 0.467913934572691 / 2, 0.467913934572691 / 2, 0.360761573048139 / 2, 0.171324492379170 / 2 ]
            val := [ 0.033765242898424, 0.169395306766867, 0.380690406958402, 0.619309593041598, 0.830604693233133, 0.966234757101576 ]
            pond := [ 0.085662246189585, 0.180380786524069, 0.233956967286345, 0.233956967286345, 0.180380786524069, 0.085662246189585 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else if order <= 13 # nb_pts_gauss = 7
            nb_pts_gauss := 7
            # val := [ ( 1 - 0.949107912342759 ) / 2, ( 1 - 0.741531185599394 ) / 2, ( 1 - 0.405845151377397 ) / 2, 1/2, ( 1 + 0.0.405845151377397 ) / 2, ( 1 + 0.0.741531185599394 ) / 2,  ( 1 + 0.949107912342759 ) / 2 ]
            # pond := [ 0.129484966168870 / 2, 0.279705391489277 / 2, 0.381830050505119 / 2, 0.417959183673469 / 2, 0.381830050505119 / 2, 0.279705391489277 / 2, 0.129484966168870 / 2 ]
            val := [ 0.025446043828620, 0.129234407200303, 0.297077424311301, 0.5, 0.702922575688699, 0.870765592799697, 0.974553956171380 ]
            pond := [ 0.064742483084435, 0.139852695744638, 0.190915025252559, 0.208979591836735, 0.190915025252559, 0.139852695744638, 0.064742483084435 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val[i] ] )
            return res
        else
            assert( 0, "TODO : order > 13" )

# 0 -- 2 -- 1
class Bar_3 inherits Bar
    static vtk_num  := 4 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[2])]
    static points   := [[0/2],[2/2],[1/2]]
    static def get_order_interpolation
        return [ 2 ]
    static def get_lower_degree_element
        return Bar

# 0 -- 2 -- 3 -- 1
class Bar_4 inherits Bar
    static vtk_num  := 4 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[3])]
    static points   := [[0/3],[3/3],[1/3],[2/3]]
    static def get_order_interpolation
        return [ 3 ]
    static def get_lower_degree_element
        return Bar_3

# 0 - 2 - 3 - 4 - 1
class Bar_5 inherits Bar
    static vtk_num  := -1 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[1])]
    static points   := [[0/4],[4/4],[1/4],[2/4],[3/4]]
    static def get_order_interpolation
        return [ 4 ]
    static def get_lower_degree_element
        return Bar_4

# 0 - 2 - 3 - 4 - 5 - 1
class Bar_6 inherits Bar
    static vtk_num  := -1 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[1])]
    static points   := [[0/5],[5/5],[1/5],[2/5],[3/5],[4/5]]
    static def get_order_interpolation
        return [ 5 ]
    static def get_lower_degree_element
        return Bar_5

# 0 - 2 - 3 - 4 - 5 - 6 - 1
class Bar_7 inherits Bar
    static vtk_num  := -1 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[1])]
    static points   := [[0/6],[6/6],[1/6],[2/6],[3/6],[4/6],[5/6]]
    static def get_order_interpolation
        return [ 6 ]
    static def get_lower_degree_element
        return Bar_6

# 0 - 2 - 3 - 4 - 5 - 6 - 7 - 1
class Bar_8 inherits Bar
    static vtk_num  := -1 # TODO
    static children := [(NodalElement,[0]),(NodalElement,[1])]
    static points   := [[0/7],[7/7],[1/7],[2/7],[3/7],[4/7],[5/7],[6/7]]
    static def get_order_interpolation
        return [ 7 ]
    static def get_lower_degree_element
        return Bar_7

# 0 - 1 - ... - n
class BarGeneric[ n ] inherits Bar # n = degre d'interpolation
    static vtk_num  := -1 # TODO
    static points   := Vec[ Vec[ Rationnal, 1 ] ]()
    for i in 0 .. n+1
        points.push_back( [ i/n ] )
    static children := [(NodalElement,[0]),(NodalElement,[n])]
    static def get_order_interpolation
        return [ n ]
    static def get_lower_degree_element
        return BarGeneric[ n-1 ]
    static def get_upper_degree_element( deg )
        return BarGeneric[ n+deg ]

#~
    2
    |\
    | \
    0--1
~#
class Triangle inherits NameElement
    property has_a_var_inter_is_inside_method
    static vtk_num  := 5
    static points   := [[0,0],[1,0],[0,1]]
    static children := [(Bar,[0,1]),(Bar,[1,2]),(Bar,[2,0])]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1-vi[0]] ]
    static def var_inter_is_inside( vi, tol = 0 )
        return heaviside( tol + vi[0] ) * heaviside( tol + vi[1] ) * heaviside( tol + 1 - vi[0] - vi[1] )
    static def get_order_interpolation
        return [ 1, 1 ]
    static def get_upper_degree_element( n )
        return TriangleGeneric[ n ]
    static def get_upper_degree_points( n )
        points_new   := Vec[ Vec[ Rationnal, 2 ] ]()
        for j in 0 .. n+1
            for i in 0 .. (n+1)-j
                points_new.push_back( [ i/n, j/n ] )
        return points_new
    static def gauss_integration( expr, order, var_inter )
        # order = 2 * nb_pts_gauss - 1
        if order <= 0 # nb_pts_gauss = 1
            nb_pts_gauss := 1
            val_vi_0 := [ 0.333333333333333 ]
            val_vi_1 := [ 0.333333333333333 ]
            pond := [ 0.5 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else if order <= 1 # nb_pts_gauss = 3
            nb_pts_gauss := 3
            val_vi_0 := [ 0.0, 0.5, 0.5 ]
            val_vi_1 := [ 0.5, 0.0, 0.5 ]
            # au choix avec :
            # val_vi_0 := [ 0.166666666666667, 0.666666666666667, 0.166666666666667 ]
            # val_vi_1 := [ 0.166666666666667, 0.166666666666667, 0.666666666666667 ]
            pond := [ 0.166666666666667, 0.166666666666667, 0.166666666666667 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else if order <= 2 # nb_pts_gauss = 6
            nb_pts_gauss := 6
            val_vi_0 := [ 0.445948490915965, 0.108103018168070, 0.445948490915965, 0.091576213509771, 0.816847572980458 , 0.091576213509771 ]
            val_vi_1 := [ 0.445948490915965, 0.445948490915965, 0.108103018168070, 0.091576213509771, 0.091576213509771, 0.816847572980458 ]
            pond := [ 0.111690794839005, 0.111690794839005, 0.111690794839005, 0.054975871827661, 0.054975871827661, 0.054975871827661 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else if order <= 3 # nb_pts_gauss = 12
            nb_pts_gauss := 12
            val_vi_0 := [ 0.063089014491502, 0.873821971016996, 0.063089014491502, 0.249286745170910, 0.501426509658180, 0.249286745170910, 0.310352451033785, 0.053145049844816, 0.636502499121399, 0.636502499121399, 0.310352451033785, 0.053145049844816 ]
            val_vi_1 := [ 0.063089014491502, 0.063089014491502, 0.873821971016996, 0.249286745170910, 0.249286745170910, 0.501426509658180, 0.053145049844816, 0.310352451033785, 0.310352451033785, 0.053145049844816, 0.636502499121399, 0.636502499121399 ]
            pond := [ 0.025422453185103, 0.025422453185103, 0.025422453185103, 0.058393137863189, 0.058393137863189, 0.058393137863189, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else if order <= 4 # nb_pts_gauss = 16
            nb_pts_gauss := 16
            val_vi_0 := [ 0.333333333333333, 0.170569307751760, 0.170569307751760, 0.658861384496480, 0.050547228317031, 0.050547228317031, 0.898905543365938, 0.459292588292723, 0.459292588292723, 0.081414823414554, 0.728492392955404, 0.263112829634638, 0.728492392955404, 0.008394777409958, 0.263112829634638, 0.008394777409958 ]
            val_vi_1 := [ 0.333333333333333, 0.170569307751760, 0.658861384496480, 0.170569307751760, 0.050547228317031, 0.898905543365938, 0.050547228317031, 0.459292588292723, 0.081414823414554, 0.459292588292723, 0.263112829634638, 0.728492392955404, 0.008394777409958, 0.728492392955404, 0.008394777409958, 0.263112829634638 ]
            pond := [ 0.072157803838894, 0.051608685267359, 0.051608685267359, 0.051608685267359, 0.016229248811599, 0.016229248811599, 0.016229248811599, 0.047545817133642, 0.047545817133642, 0.047545817133642, 0.013615157087217, 0.013615157087217, 0.013615157087217, 0.013615157087217, 0.013615157087217, 0.013615157087217 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else if order <= 5 # nb_pts_gauss = 25
            nb_pts_gauss := 25
            val_vi_0 := [ 0.333333333333333, 0.142161101056564, 0.142161101056564, 0.715677797886871, 0.032055373216944, 0.032055373216944, 0.935889253566113, 0.530054118927344, 0.321812995288835, 0.530054118927344, 0.148132885783821, 0.321812995288835, 0.148132885783821, 0.601233328683459, 0.369146781827811, 0.601233328683459, 0.029619889488730, 0.369146781827811, 0.029619889488730, 0.807930600922879, 0.163701733737182, 0.807930600922879, 0.028367665339938, 0.163701733737182, 0.028367665339938 ]
            val_vi_1 := [ 0.333333333333333, 0.142161101056564, 0.715677797886871, 0.142161101056564, 0.032055373216944, 0.935889253566113, 0.032055373216944, 0.321812995288835, 0.530054118927344, 0.148132885783821, 0.530054118927344, 0.148132885783821, 0.321812995288835, 0.369146781827811, 0.601233328683459, 0.029619889488730 , 0.601233328683459, 0.029619889488730, 0.369146781827811, 0.163701733737182, 0.807930600922879, 0.028367665339938, 0.807930600922879, 0.028367665339938, 0.163701733737182 ]
            pond := [ 0.040871664573143, 0.022978981802372, 0.022978981802372, 0.022978981802372, 0.006676484406575, 0.006676484406575, 0.006676484406575, 0.031952453198212, 0.031952453198212, 0.031952453198212, 0.031952453198212, 0.031952453198212, 0.031952453198212, 0.017092324081480, 0.017092324081480, 0.017092324081480,  0.017092324081480, 0.017092324081480, 0.017092324081480, 0.012648878853644, 0.012648878853644, 0.012648878853644, 0.012648878853644, 0.012648878853644, 0.012648878853644 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res
        else # if order <= 6 # nb_pts_gauss = 37
            nb_pts_gauss := 37
            val_vi_0 := [ 0.0, 0.5, 0.5, 0.333333333333333, 0.024607188643230, 0.024607188643230, 0.950785622713540, 0.420308753101195, 0.420308753101195, 0.159382493797611, 0.227900255506161, 0.227900255506161, 0.544199488987679, 0.116213058883518, 0.116213058883518, 0.767573882232964, 0.476602980049079, 0.476602980049079, 0.046794039901842, 0.851775587145410, 0.022797894538249, 0.851775587145410, 0.125426518316341, 0.022797894538249, 0.125426518316341, 0.692797317566661, 0.016275770991089, 0.692797317566661, 0.290926911442251, 0.016275770991089, 0.290926911442251, 0.637955883864210, 0.089733060451605, 0.637955883864210, 0.272311055684185, 0.089733060451605, 0.272311055684185 ]
            val_vi_1 := [ 0.5, 0.0, 0.5, 0.333333333333333, 0.024607188643230, 0.950785622713540, 0.024607188643230, 0.420308753101195, 0.159382493797611, 0.420308753101195, 0.227900255506161, 0.544199488987679, 0.227900255506161, 0.116213058883518, 0.767573882232964, 0.116213058883518, 0.476602980049079, 0.046794039901842, 0.476602980049079, 0.022797894538249, 0.851775587145410, 0.125426518316341, 0.851775587145410, 0.125426518316341, 0.022797894538249, 0.016275770991089, 0.692797317566661, 0.290926911442251, 0.692797317566661, 0.290926911442251, 0.016275770991089, 0.089733060451605, 0.637955883864210, 0.272311055684185, 0.637955883864210, 0.272311055684185, 0.089733060451605 ]
            pond := [ 0.002678451895545, 0.002678451895545, 0.002678451895545, 0.029348039806360, 0.003925384148050, 0.003925384148050, 0.003925384148050, 0.025334476587943, 0.025334476587943, 0.025334476587943, 0.025040163045255, 0.025040163045255, 0.025040163045255, 0.015823557296149, 0.015823557296149, 0.015823557296149, 0.015746281537984, 0.015746281537984, 0.015746281537984, 0.007901266107630, 0.007901266107630, 0.007901266107630, 0.007901266107630, 0.007901266107630, 0.007901266107630, 0.007990818890464, 0.007990818890464, 0.007990818890464, 0.007990818890464, 0.007990818890464, 0.007990818890464, 0.018275751112049, 0.018275751112049, 0.018275751112049, 0.018275751112049, 0.018275751112049, 0.018275751112049 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i] ] )
            return res

#~
    2
    | \
    5  4
    |   \
    0-3-1
~#

class Triangle_6 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [[0,0],[1,0],[0,1],[0.5,0],[0.5,0.5],[0,0.5]]
    static children := [(Bar_3,[0,1,3]),(Bar_3,[1,2,4]),(Bar_3,[2,0,5])]
    static def get_order_interpolation
        return [ 2, 2 ]
    static def get_lower_degree_element
        return Triangle
    static def val_nodes_from_lower_degre( ptr )
        return [
            ptr[0]
            0.5 * ( ptr[0] + ptr[1] )
            ptr[1]
            0.5 * ( ptr[0] + ptr[2] )
            0.5 * ( ptr[1] + ptr[2] )
            ptr[2]
        ]

#~
    8
    | \
    6  7
    |  \
    4   5
    |   \
    0-1-2-3
~#
class Triangle_9 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/3,0/3],[1/3,0/3],[2/3,0/3],[3/3,0/3],
        [0/3,1/3],          [2/3,1/3],
        [0/3,2/3],[1/3,2/3],
        [0/3,3/3]
    ]
    static children := [(Bar_4,[0,3,1,2]),(Bar_4,[3,8,5,7]),(Bar_4,[8,0,6,4])]
    static def get_order_interpolation
        return [ 3, 3 ]
    static def get_lower_degree_element
        return Triangle_6

#~
    9
    | \
    7  8
    |   \
    4 5 6
    |    \
    0-1-2-3
~#
class Triangle_10 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/3,0/3],[1/3,0/3],[2/3,0/3],[3/3,0/3],
        [0/3,1/3],[1/3,1/3],[2/3,1/3],
        [0/3,2/3],[1/3,2/3],
        [0/3,3/3]
    ]
    static children := [(Bar_4,[0,3,1,2]),(Bar_4,[3,9,6,8]),(Bar_4,[9,0,7,4])]
    static def get_order_interpolation
        return [ 3, 3 ]
    static def get_lower_degree_element
        return Triangle_6

#~
    14
    |   \
    12   13
    |      \
    9  10   11
    |        \
    5  6  7   8
    |          \
    0--1--2--3--4
~#
class Triangle_15 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/4,0/4],[1/4,0/4],[2/4,0/4],[3/4,0/4],[4/4,0/4],
        [0/4,1/4],[1/4,1/4],[2/4,1/4],[3/4,1/4],
        [0/4,2/4],[1/4,2/4],[2/4,2/4],
        [0/4,3/4],[1/4,3/4],
        [0/4,4/4]
    ]
    static children := [(Bar_5,[0,4,1,2,3]),(Bar_5,[4,14,8,11,13]),(Bar_5,[14,0,12,9,5])]
    static def get_order_interpolation
        return [ 4, 4 ]
    static def get_lower_degree_element
        return Triangle_10

#~
    20
    |   \
    18   19
    |      \
    15  16  17
    |         \
    11 12 13  14
    |           \
    6  7  8  9   10
    |             \
    0--1--2--3--4--5
~#

class Triangle_21 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/5,0/5],[1/5,0/5],[2/5,0/5],[3/5,0/5],[4/5,0/5],[5/5,0/5],
        [0/5,1/5],[1/5,1/5],[2/5,1/5],[3/5,1/5],[4/5,1/5],
        [0/5,2/5],[1/5,2/5],[2/5,2/5],[3/5,2/5],
        [0/5,3/5],[1/5,3/5],[2/5,3/5],
        [0/5,4/5],[1/5,4/5],
        [0/5,5/5]
    ]
    static children := [(Bar_6,[0,5,1,2,3,4]),(Bar_6,[5,20,10,14,17,19]),(Bar_6,[20,0,18,15,11,6])]
    static def get_order_interpolation
        return [ 5, 5 ]
    static def get_lower_degree_element
        return Triangle_15

#~
    27
    |   \
    25   26
    |       \
    22  23   24
    |          \
    18  19  20  21
    |            \
    13 14 15  16 17
    |              \
    7  8  9  10  11 12
    |                \
    0--1--2--3--4--5--6
~#

class Triangle_28 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/6,0/6],[1/6,0/6],[2/6,0/6],[3/6,0/6],[4/6,0/6],[5/6,0/6],[6/6,0/6],
        [0/6,1/6],[1/6,1/6],[2/6,1/6],[3/6,1/6],[4/6,1/6],[5/6,1/6],
        [0/6,2/6],[1/6,2/6],[2/6,2/6],[3/6,2/6],[4/6,2/6],
        [0/6,3/6],[1/6,3/6],[2/6,3/6],[3/6,3/6],
        [0/6,4/6],[1/6,4/6],[2/6,4/6],
        [0/6,5/6],[1/6,5/6],
        [0/6,6/6]
    ]
    static children := [(Bar_7,[0,6,1,2,3,4,5]),(Bar_7,[6,27,12,17,21,24,26]),(Bar_6,[27,0,25,22,18,13,7])]
    static def get_order_interpolation
        return [ 6, 6 ]
    static def get_lower_degree_element
        return Triangle_21

#~
    35
    |   \
    33   34
    |      \
    30  31  32
    |          \
    26  27  28  29
    |             \
    21  22  23  24 25
    |               \
    15 16 17 18 19  20
    |                 \
    8  9  10 11 12 13 14
    |                   \
    0--1--2--3--4--5--6--7
~#

class Triangle_36 inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := [
        [0/7,0/7],[1/7,0/7],[2/7,0/7],[3/7,0/7],[4/7,0/7],[5/7,0/7],[6/7,0/7],[7/7,0/7],
        [0/7,1/7],[1/7,1/7],[2/7,1/7],[3/7,1/7],[4/7,1/7],[5/7,1/7],[6/7,1/7],
        [0/7,2/7],[1/7,2/7],[2/7,2/7],[3/7,2/7],[4/7,2/7],[5/7,2/7],
        [0/7,3/7],[1/7,3/7],[2/7,3/7],[3/7,3/7],[4/7,3/7],
        [0/7,4/7],[1/7,4/7],[2/7,4/7],[3/7,4/7],
        [0/7,5/7],[1/7,5/7],[2/7,5/7],
        [0/7,6/7],[1/7,6/7],
        [0/7,7/7]
    ]
    static children := [(Bar_8,[0,7,1,2,3,4,5,6]),(Bar_8,[7,35,14,20,25,29,32,34]),(Bar_8,[35,0,33,30,26,21,15,8])]
    static def get_order_interpolation
        return [ 7, 7 ]
    static def get_lower_degree_element
        return Triangle_28

#~
            n+S(n)
             x
             |  \
S(n+1)-S(n-2)x    xn+S(n)-S(n-3)
             |       \
S(n+1)-S(n-1)x    x    xn+S(n)-S(n-2)
             |            \
  S(n+1)-S(n)x    x    x    xn+S(n)-S(n-1)
             |                 \
             x----x----x----x----x
             0    1    2    3    n
~#
class TriangleGeneric[ n ] inherits Triangle
    static vtk_num  := -1 # TODO
    static points   := Vec[ Vec[ Rationnal, 2 ] ]()
    for j in 0 .. n+1
        for i in 0 .. (n+1)-j
            points.push_back( [ i/n, j/n ] )
    static children := [
        ( BarGeneric[ n ], Vec[ Int32 ](  0 .. n+1                                                         ) ),
        ( BarGeneric[ n ], Vec[ Int32 ](  n + sum(0 .. n+1) - ( (1 .. n+2).map( sum(0 .. _0) ) ).reversed  ) ),
        ( BarGeneric[ n ], Vec[ Int32 ](  sum(0 .. n+2) - (2 .. n+3).map( sum(0 .. _0) )      ) )
    ]
    static def get_order_interpolation
        return [ n, n ]

#~
   3 - 2
   |   |
   0 - 1
~#
class Quad inherits NameElement
    static vtk_num  := 9
    static points   := [[0,0],[1,0],[1,1],[0,1]]
    static children := [(Bar,[0,1]),(Bar,[1,2]),(Bar,[2,3]),(Bar,[3,0])]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1] ]
    static def var_inter_is_inside( vi, tol = 0 )
        return heaviside( tol + vi[0] ) * heaviside( tol + vi[1] ) * heaviside( tol + 1 - vi[0] ) * heaviside( tol + 1 - vi[1] )
    static def get_order_interpolation
        return [ 1, 1 ]
    static def get_upper_degree_element( n )
        return QuadGeneric[ n ]
    static def get_upper_degree_points( n )
        points_new   := Vec[ Vec[ Rationnal, 2 ] ]()
        for j in 0 .. n+1
            for i in 0 .. n+1
                points_new.push_back( [ i/n, j/n ] )
        return points_new
    static def gauss_integration( expr, order, var_inter )
        # order = 2 * nb_pts_gauss - 1
        if order <= 1 # nb_pts_gauss = 1
            nb_pts_gauss := 1
            # val := [ 1/2 ]
            # pond := [ 1 ]
            val := [ 0.5 ]
            pond := [ 1.0 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 3 # nb_pts_gauss = 2
            nb_pts_gauss := 2
            # val := [ ( 1 - sqrt( Float96(1/3) ) ) / 2, ( 1 + sqrt( Float96(1/3) ) ) / 2 ]
            # pond := [ 1/2, 1/2 ]
            val := [ 0.211324865405187, 0.788675134594813 ]
            pond := [ 0.5, 0.5 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 5 # nb_pts_gauss = 3
            nb_pts_gauss := 3
            # val := [ ( 1 - sqrt( Float96(3/5) ) ) / 2, 1/2, ( 1 + sqrt( Float96(3/5) ) ) / 2 ]
            # pond := [ (5/9) / 2, (8/9) / 2, (5/9) / 2 ]
            val := [ 0.112701665379258, 0.5, 0.887298334620742 ]
            pond := [ 0.277777777777778, 0.444444444444444, 0.277777777777778 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 7 # nb_pts_gauss = 4
            nb_pts_gauss := 4
            # val := [ ( 1 - sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 - sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2 ]
            # pond := [ ((18 - sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 - sqrt(Float96(30)))/36) / 2 ]
            val := [ 0.069431844202974, 0.330009478207572, 0.669990521792428, 0.930568155797026 ]
            pond := [ 0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 9 # nb_pts_gauss = 5
            nb_pts_gauss := 5
            # val := [ ( 1 - 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 - 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, 1/2, ( 1 + 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 + 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2 ]
            # pond := [ ((322 - 13 * sqrt(Float96(70)))/900) / 2, ((322 + 13 * sqrt(Float96(70)))/900 ) / 2, (128/225) / 2, ((322 + 13 * sqrt(Float96(70)))/900) / 2, ((322 - 13 * sqrt(Float96(70)))/900) / 2 ]
            val := [ 0.046910077030668, 0.230765344947159, 0.5, 0.769234655052841, 0.953089922969332 ]
            pond := [ 0.118463442528095, 0.239314335249683, 0.284444444444444, 0.239314335249683, 0.118463442528095 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 11 # nb_pts_gauss = 6
            nb_pts_gauss := 6
            # val := [ ( 1 - 0.932469514203152 ) / 2, ( 1 - 0.661209386466265 ) / 2, ( 1 - 0.238619186083197 ) / 2, ( 1 + 0.238619186083197 ) / 2, ( 1 + 0.661209386466265 ) / 2,  ( 1 + 0.932469514203152 ) / 2 ]
            # pond := [ 0.171324492379170 / 2, 0.360761573048139 / 2, 0.467913934572691 / 2, 0.467913934572691 / 2, 0.360761573048139 / 2, 0.171324492379170 / 2 ]
            val := [ 0.033765242898424, 0.169395306766867, 0.380690406958402, 0.619309593041598, 0.830604693233133, 0.966234757101576 ]
            pond := [ 0.085662246189585, 0.180380786524069, 0.233956967286345, 0.233956967286345, 0.180380786524069, 0.085662246189585 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else if order <= 13 # nb_pts_gauss = 7
            nb_pts_gauss := 7
            # val := [ ( 1 - 0.949107912342759 ) / 2, ( 1 - 0.741531185599394 ) / 2, ( 1 - 0.405845151377397 ) / 2, 1/2, ( 1 + 0.0.405845151377397 ) / 2, ( 1 + 0.0.741531185599394 ) / 2,  ( 1 + 0.949107912342759 ) / 2 ]
            # pond := [ 0.129484966168870 / 2, 0.279705391489277 / 2, 0.381830050505119 / 2, 0.417959183673469 / 2, 0.381830050505119 / 2, 0.279705391489277 / 2, 0.129484966168870 / 2 ]
            val := [ 0.025446043828620, 0.129234407200303, 0.297077424311301, 0.5, 0.702922575688699, 0.870765592799697, 0.974553956171380 ]
            pond := [ 0.064742483084435, 0.139852695744638, 0.190915025252559, 0.208979591836735, 0.190915025252559, 0.139852695744638, 0.064742483084435 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    res += pond[i] * pond[j] * expr.subs( var_inter, [ val[i], val[j] ] )
            return res
        else
            assert( 0, "TODO : order > 13" )

#~
  3    6    2
  x----x----x
  |         |
 7x         x5
  |         |
  x----x----x
  0    4    1
~#
class Quad_8 inherits Quad
    static vtk_num  := -1 # TODO
    static points   := [
        [0/2,0/2],[2/2,0/2],[2/2,2/2],
        [0/2,2/2],          [1/2,0/2],
        [2/2,1/2],[1/2,2/2],[0/2,1/2]
    ]
    static children := [(Bar_3,[0,1,4]),(Bar_3,[1,2,5]),(Bar_3,[2,3,6]),(Bar_3,[3,0,7])]
    static def get_order_interpolation
        return [ 2, 2 ]

#~
  3    6    2
  x----x----x
  |         |
 7x    x8   x5
  |         |
  x----x----x
  0    4    1
~#
class Quad_9 inherits Quad
    static vtk_num  := -1 # TODO
    static points   := [
        [0/2,0/2],[2/2,0/2],[2/2,2/2],
        [0/2,2/2],[1/2,0/2],[2/2,1/2],
        [1/2,2/2],[0/2,1/2],[1/2,1/2]
    ]
    static children := [(Bar_3,[0,1,4]),(Bar_3,[1,2,5]),(Bar_3,[2,3,6]),(Bar_3,[3,0,7])]
    static def get_order_interpolation
        return [ 2, 2 ]

# #~
# 8    9   10   11
# x----x----x----x
# |              |
# 6x              x7
# |              |
# 4x              x5
# |              |
# x----x----x----x
# 0    1    2    3
# ~#
# class Quad_12 inherits Quad
# static vtk_num  := -1 # TODO
# static points   := [
# [0/3,0/3],[1/3,0/3],[2/3,0/3],[3/3,0/3],
# [0/3,1/3],                    [3/3,1/3],
# [0/3,2/3],                    [3/3,2/3],
# [0/3,3/3],[1/3,3/3],[2/3,3/3],[3/3,3/3]
# ]
# static children := [(Bar_4,[0,3,1,2]),(Bar_4,[3,11,5,7]),(Bar_4,[11,8,10,9]),(Bar_4,[8,0,6,4])]

# #~
# 3    12   11   10   2
# x----x----x----x----x
# |                   |
# 13x                   x9
# |                   |
# 14x                   x8
# |                   |
# 15x                   x7
# |                   |
# x----x----x----x----x
# 0    4    5    6    1
# ~#
# class Quad_16 inherits Quad
# static vtk_num  := -1 # TODO
# static points   := [[0,0],[1,0],[1,1],[0,1],
# [1/4,0],[1/2,0],[3/4,0],
# [1,1/4],[1,1/2],[1,3/4],
# [3/4,1],[1/2,1],[1/4,1],
# [0,3/4],[0,1/2],[0,1/4]]
# static children := [(Bar_5,[0,1,4,5,6]),(Bar_5,[1,2,7,8,9]),(Bar_5,[2,3,10,11,12]),(Bar_5,[3,0,13,14,15])]

#~ 
   n(n+1)              (n+1)^2-1
      x----x----x----x----x
      |                   |
3(n+1)x    x    x    x    x4(n+1)-1
      |                   |
2(n+1)x    x    x    x    x3(n+1)-1
      |                   |
   n+1x    x    x    x    x2(n+1)-1
      |                   |
      x----x----x----x----x
      0    1    2    3    n
~#
class QuadGeneric[ n ] inherits Quad
    static vtk_num  := -1 # TODO
    static points   := Vec[ Vec[ Rationnal, 2 ] ]()
    for j in 0 .. n+1
        for i in 0 .. n+1
            points.push_back( [ i/n, j/n ] )
    static children := [
        ( BarGeneric[ n ], Vec[ Int32 ](  0 .. n+1                           ) ),
        ( BarGeneric[ n ], Vec[ Int32 ]( ( 1 .. n+2 ) * (n+1) - 1            ) ),
        ( BarGeneric[ n ], Vec[ Int32 ]( ( n*(n+1) .. (n+1)*(n+1) ).reversed   ) ),
        ( BarGeneric[ n ], Vec[ Int32 ]( ( ( 0 .. n+1 ) * (n+1) ).reversed   ) )
    ]
    static def get_order_interpolation
        return [ n, n ]

#~
         3
        /|\
       / | \
      /  |  \
     /  /2\  \
    / /     \ \
   0/---------\1
~#
class Tetra inherits NameElement
    property has_a_var_inter_is_inside_method
    static vtk_num  := 10
    static points   := [[0,0,0],[1,0,0],[0,1,0],[0,0,1]]
    static children := [(Triangle,[0,2,1]),(Triangle,[0,1,3]),(Triangle,[0,3,2]),(Triangle,[1,2,3])]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1-vi[0]], [0,1-vi[0]-vi[1]] ]
    static def var_inter_is_inside( vi, tol = 0 )
        return heaviside( tol + vi[0] ) * heaviside( tol + vi[1] ) * heaviside( tol + vi[2] ) * heaviside( tol + 1 - vi[0] - vi[1] - vi[2] )
    static def get_order_interpolation
        return [ 1, 1, 1 ]
    static def get_upper_degree_element( n )
        return TetraGeneric[ n ]
    static def get_upper_degree_points( n )
        points_new   := Vec[ Vec[ Rationnal, 3 ] ]()
        for k in 0 .. n+1
            for j in 0 .. (n+1)-k
                for i in 0 .. (n+1)-k-j
                    points_new.push_back( [ i/n, j/n, k/n ] )
        return points_new
    static def gauss_integration( expr, order, var_inter )
        if order <= 0 # nb_pts_gauss = 1
            nb_pts_gauss := 1
            val_vi_0 := [ 0.25 ]
            val_vi_1 := [ 0.25 ]
            val_vi_2 := [ 0.25 ]
            pond := [ 0.166666666666667 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i], val_vi_2[i] ] )
            return res
        else if order <= 1 # nb_pts_gauss = 3
            nb_pts_gauss := 5
            val_vi_0 := [ 0.25, 0.166666666666667, 0.166666666666667, 0.166666666666667, 0.166666666666667, 0.5 ]
            val_vi_1 := [ 0.25, 0.166666666666667, 0.166666666666667, 0.5, 0.166666666666667 ]
            val_vi_2 := [ 0.25, 0.166666666666667, 0.5, 0.166666666666667, 0.166666666666667 ]
            pond := [ -0.133333333333333, 0.075, 0.075, 0.075, 0.075 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i], val_vi_2[i] ] )
            return res
        # else if order <= 2 # nb_pts_gauss = 24
            # nb_pts_gauss := 24
            # a := 0.063661001875018
            # b := 0.269672331458316
            # c := 0.666666666666667
            # val_vi_0 := [ 0.214602871259152, 0.356191386222544, 0.214602871259152, 0.214602871259152, 0.040673958534611, 0.877978124396166, 0.040673958534611, 0.040673958534611, 0.322337890142275, 0.032986329573173, 0.322337890142275, 0.322337890142275, a, b, a, a, c, a, b, c, b, ]
            # val_vi_1 := [ 0.214602871259152, 0.214602871259152, 0.356191386222544, 0.214602871259152, 0.040673958534611, 0.040673958534611, 0.877978124396166, 0.040673958534611, 0.322337890142275, 0.322337890142275, 0.032986329573173, 0.322337890142275, a, a, b, a, a, c, b, b, c, ]
            # val_vi_2 := [ 0.214602871259152, 0.214602871259152, 0.214602871259152, 0.356191386222544, 0.040673958534611, 0.040673958534611, 0.040673958534611, 0.877978124396166, 0.322337890142275, 0.322337890142275, 0.322337890142275, 0.032986329573173, b, a, a, c, a, a, c, b, b, ]
            # pond := [ 0.006653791709695, 0.006653791709695, 0.006653791709695, 0.006653791709695, 0.001679535175887, 0.001679535175887, 0.001679535175887, 0.001679535175887, 0.009226196923942, 0.009226196923942, 0.009226196923942, 0.009226196923942, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714, 0.008035714285714 ]
            # res := Op( 0 )
            # for i in 0 .. nb_pts_gauss
                # res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i], val_vi_2[i] ] )
            # return res

#~
        3
       /|\
      / |9\
    7/  |  \8
    /  /2\  \
   / /6   5\ \
  0/--- 4----\1
~#
class Tetra_10 inherits Tetra
    static points := [
        [0/2,0/2,0/2],[2/2,0/2,0/2],[0/2,2/2,0/2],
        [0/2,0/2,2/2],[1/2,0/2,0/2],
        [1/2,1/2,0/2],
        
        [0/2,1/2,0/2],[0/2,0/2,1/2],
        [1/2,0/2,1/2],
        
        [0/2,1/2,1/2]
    ]
    static children := [(Triangle_6,[0,2,1,6,5,4]),(Triangle_6,[0,1,3,4,8,7]),(Triangle_6,[0,3,2,7,9,6]),(Triangle_6,[1,2,3,5,9,8])]
    static def get_order_interpolation
        return [ 2, 2, 2 ]
    static def val_nodes_from_lower_degre( ptr )
        return [
            ptr[0]
            0.5 * ( ptr[0] + ptr[2] )
            ptr[2]
            0.5 * ( ptr[0] + ptr[5] )
            0.5 * ( ptr[2] + ptr[5] )
            ptr[5]
            0.5 * ( ptr[0] + ptr[9] )
            0.5 * ( ptr[2] + ptr[9] )
            0.5 * ( ptr[5] + ptr[9] )
            ptr[9]
        ]

#~
        9
       /|\
      / |8\
    6/  |  \7
    /  /5\  \
   / /3   4\ \
  0/--- 1----\2
~#
class TetraGeneric[ n ] inherits Tetra
    static vtk_num  := -1 # TODO
    static points   := Vec[ Vec[ Rationnal, 3 ] ]()
    for k in 0 .. n+1
        for j in 0 .. (n+1)-k
            for i in 0 .. (n+1)-k-j
                points.push_back( [ i/n, j/n, k/n ] )
    static def get_order_interpolation
        return [ n, n, n ]
    # static children := [
        # ( TriangleGeneric[ n ], Vec[ Int32 ](  n + sum(0 .. n+1) - (1 .. n+2).map( sum(0 .. _0) )                                ) ),
        # ( TriangleGeneric[ n ], Vec[ Int32 ](  n + sum(0 .. n+1) - ( (1 .. n+2).map( sum(0 .. _0) ) ).reversed  ) ),
        # ( TriangleGeneric[ n ], Vec[ Int32 ](  sum(0 .. n+2) - (2 .. n+3).map( sum(0 .. _0) )      ) ),
        # ( TriangleGeneric[ n ], Vec[ Int32 ](  sum(0 .. n+2) - (2 .. n+3).map( sum(0 .. _0) )      ) )
    # ]

#~
      7 ---------6
     /|         /|
    / |        / |
   /  |       /  |
  4----------5   |
  |   |      |   |
  |   3------|-- 2
  |  /       |  /
  | /        | /
  |/         |/
  0--------- 1
~#
class Hexa inherits NameElement
    static vtk_num  := 12 
    static points   := [[0,0,0],[1,0,0],[1,1,0],[0,1,0],
                        [0,0,1],[1,0,1],[1,1,1],[0,1,1]]
    static children := [(Quad,[0,3,2,1]),(Quad,[4,5,6,7]),(Quad,[0,1,5,4]),(Quad,[3,7,6,2]),(Quad,[0,4,7,3]),(Quad,[1,2,6,5])]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1], [0,1] ]
    static def get_order_interpolation
        return [ 1, 1, 1 ]
    static def get_upper_degree_element( n )
        return HexaGeneric[ n ]
    static def get_upper_degree_points( n )
        points_new   := Vec[ Vec[ Rationnal, 3 ] ]()
        for k in 0 .. n+1
            for j in 0 .. n+1
                for i in 0 .. n+1
                    points_new.push_back( [ i/n, j/n, k/n ] )
        return points_new
    static def gauss_integration( expr, order, var_inter )
        # order = 2 * nb_pts_gauss - 1
        if order <= 1 # nb_pts_gauss = 1
            nb_pts_gauss := 1
            # val := [ 1/2 ]
            # pond := [ 1 ]
            val := [ 0.5 ]
            pond := [ 1.0 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 3 # nb_pts_gauss = 2
            nb_pts_gauss := 2
            # val := [ ( 1 - sqrt( Float96(1/3) ) ) / 2, ( 1 + sqrt( Float96(1/3) ) ) / 2 ]
            # pond := [ 1/2, 1/2 ]
            val := [ 0.211324865405187, 0.788675134594813 ]
            pond := [ 0.5, 0.5 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 5 # nb_pts_gauss = 3
            nb_pts_gauss := 3
            # val := [ ( 1 - sqrt( Float96(3/5) ) ) / 2, 1/2, ( 1 + sqrt( Float96(3/5) ) ) / 2 ]
            # pond := [ (5/9) / 2, (8/9) / 2, (5/9) / 2 ]
            val := [ 0.112701665379258, 0.5, 0.887298334620742 ]
            pond := [ 0.277777777777778, 0.444444444444444, 0.277777777777778 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 7 # nb_pts_gauss = 4
            nb_pts_gauss := 4
            # val := [ ( 1 - sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 - sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3-2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2, ( 1 + sqrt( Float96( ( 3+2*sqrt( Float96(6/5)) ) / 7 ) ) ) / 2 ]
            # pond := [ ((18 - sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 + sqrt(Float96(30)))/36) / 2, ((18 - sqrt(Float96(30)))/36) / 2 ]
            val := [ 0.069431844202974, 0.330009478207572, 0.669990521792428, 0.930568155797026 ]
            pond := [ 0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 9 # nb_pts_gauss = 5
            nb_pts_gauss := 5
            # val := [ ( 1 - 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 - 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, 1/2, ( 1 + 1/3 * sqrt( Float96( 5-2*sqrt( Float96(10/7) ) ) ) ) / 2, ( 1 + 1/3 * sqrt( Float96( 5+2*sqrt( Float96(10/7) ) ) ) ) / 2 ]
            # pond := [ ((322 - 13 * sqrt(Float96(70)))/900) / 2, ((322 + 13 * sqrt(Float96(70)))/900 ) / 2, (128/225) / 2, ((322 + 13 * sqrt(Float96(70)))/900) / 2, ((322 - 13 * sqrt(Float96(70)))/900) / 2 ]
            val := [ 0.046910077030668, 0.230765344947159, 0.5, 0.769234655052841, 0.953089922969332 ]
            pond := [ 0.118463442528095, 0.239314335249683, 0.284444444444444, 0.239314335249683, 0.118463442528095 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 11 # nb_pts_gauss = 6
            nb_pts_gauss := 6
            # val := [ ( 1 - 0.932469514203152 ) / 2, ( 1 - 0.661209386466265 ) / 2, ( 1 - 0.238619186083197 ) / 2, ( 1 + 0.238619186083197 ) / 2, ( 1 + 0.661209386466265 ) / 2,  ( 1 + 0.932469514203152 ) / 2 ]
            # pond := [ 0.171324492379170 / 2, 0.360761573048139 / 2, 0.467913934572691 / 2, 0.467913934572691 / 2, 0.360761573048139 / 2, 0.171324492379170 / 2 ]
            val := [ 0.033765242898424, 0.169395306766867, 0.380690406958402, 0.619309593041598, 0.830604693233133, 0.966234757101576 ]
            pond := [ 0.085662246189585, 0.180380786524069, 0.233956967286345, 0.233956967286345, 0.180380786524069, 0.085662246189585 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else if order <= 13 # nb_pts_gauss = 7
            nb_pts_gauss := 7
            # val := [ ( 1 - 0.949107912342759 ) / 2, ( 1 - 0.741531185599394 ) / 2, ( 1 - 0.405845151377397 ) / 2, 1/2, ( 1 + 0.0.405845151377397 ) / 2, ( 1 + 0.0.741531185599394 ) / 2,  ( 1 + 0.949107912342759 ) / 2 ]
            # pond := [ 0.129484966168870 / 2, 0.279705391489277 / 2, 0.381830050505119 / 2, 0.417959183673469 / 2, 0.381830050505119 / 2, 0.279705391489277 / 2, 0.129484966168870 / 2 ]
            val := [ 0.025446043828620, 0.129234407200303, 0.297077424311301, 0.5, 0.702922575688699, 0.870765592799697, 0.974553956171380 ]
            pond := [ 0.064742483084435, 0.139852695744638, 0.190915025252559, 0.208979591836735, 0.190915025252559, 0.139852695744638, 0.064742483084435 ]
            res := Op( 0 )
            for i in 0 .. nb_pts_gauss
                for j in 0 .. nb_pts_gauss
                    for k in 0 .. nb_pts_gauss
                        res += pond[i] * pond[j] * pond[k] * expr.subs( var_inter, [ val[i], val[j], val[k] ] )
            return res
        else
            assert( 0, "TODO : order > 13" )

#~
     7 ---14----6
    /|         /|
  15 |       13 |
  /  19      /  18
 4-----12---5   |
 |   |      |   |
 |   3---10-|-- 2
16  /      17  /
 |11        | 9
 |/         |/
 0-----8----1
~#
class Hexa_20 inherits Hexa
    static points   := [
        [0/2,0/2,0/2], [2/2,0/2,0/2], [2/2,2/2,0/2], 
        [0/2,2/2,0/2],                [0/2,0/2,2/2], 
        [2/2,0/2,2/2], [2/2,2/2,2/2], [0/2,2/2,2/2], 
        
        [1/2,0/2,0/2],                [2/2,1/2,0/2], 
        [1/2,2/2,0/2],                [0/2,1/2,0/2], 
        
        [1/2,0/2,2/2], [2/2,1/2,2/2], [1/2,2/2,2/2], 
        [0/2,1/2,2/2],                [0/2,0/2,1/2], 
        [2/2,0/2,1/2], [2/2,2/2,1/2], [0/2,2/2,1/2]
    ]
    static children := [
        (Quad_8,[0,3,2,1,11,10,9,8]),(Quad_8,[4,5,6,7,12,13,14,15]),
        (Quad_8,[0,1,5,4,8,17,12,16]),(Quad_8,[1,2,6,5,9,18,13,17]),
        (Quad_8,[3,7,6,2,19,14,18,10]),(Quad_8,[0,4,7,3,16,15,19,11])
    ]
    static def get_order_interpolation
        return [ 2, 2, 2 ]
    static def val_nodes_from_lower_degre( ptr )
        return [
            ptr[0]
            0.5 * ( ptr[0] + ptr[1] )
            ptr[1]
            0.5 * ( ptr[0] + ptr[2] )
            0.5 * ( ptr[1] + ptr[3] )
            ptr[2]
            0.5 * ( ptr[2] + ptr[3] )
            ptr[3]
            0.5 * ( ptr[0] + ptr[4] )
            0.5 * ( ptr[1] + ptr[5] )
            0.5 * ( ptr[2] + ptr[6] )
            0.5 * ( ptr[2] + ptr[7] )
            ptr[4]
            0.5 * ( ptr[4] + ptr[5] )
            ptr[5]
            0.5 * ( ptr[4] + ptr[6] )
            0.5 * ( ptr[5] + ptr[7] )
            ptr[6]
            0.5 * ( ptr[6] + ptr[7] )
            ptr[7]
        ]

# #~
     # 24 ---25----26
     # /|         /|
   # 21 | 22    23 |
   # /  15  16  /  17
 # 18----19----20  |
  # |12 | 13   |14 |
  # |   6----7-|-- 8
  # 9  /10    11  /
  # | 3    4   | 5
  # |/         |/
  # 0----1---- 2
# ~#
# class Hexa_27 inherits Hexa
    # static vtk_num  := -1 # TODO
    # static points   := [
        # [0/2,0/2,0/2], [1/2,0/2,0/2], [2/2,0/2,0/2], 
        # [0/2,1/2,0/2], [1/2,1/2,0/2], [2/2,1/2,0/2], 
        # [0/2,2/2,0/2], [1/2,2/2,0/2], [2/2,2/2,0/2], 
        
        # [0/2,0/2,1/2], [1/2,0/2,1/2], [2/2,0/2,1/2], 
        # [0/2,1/2,1/2], [1/2,1/2,1/2], [2/2,1/2,1/2], 
        # [0/2,2/2,1/2], [1/2,2/2,1/2], [2/2,2/2,1/2], 
        
        # [0/2,0/2,2/2], [1/2,0/2,2/2], [2/2,0/2,2/2], 
        # [0/2,1/2,2/2], [1/2,1/2,2/2], [2/2,1/2,2/2], 
        # [0/2,2/2,2/2], [1/2,2/2,2/2], [2/2,2/2,2/2]
    # ]
    # static children := [(Quad_9,[0,3,6,1,4,7,2,5,8]), (Quad,[18,19,20,21,22,23,24,25,26]), (Quad,[0,1,2,9,10,11,18,19,20]), (Quad,[6,15,24,7,16,25,6,17,26]), (Quad,[2,5,8,11,14,17]), (Quad,[0,9,18,3,12,21,6,15,24]) ]
    # static def get_order_interpolation
        # return [ 2, 2, 2 ]

# #~
        # 7 ---- 21 ---- 20 ---- 6
       # /|                     /|
     # 22 |                   19 |
     # /  31                  /  30
   # 23   |                 18   |
   # /    |                 /    |
  # 4 -----16 ---- 17 ---- 5     |
  # |    27                |     26
  # |     |                |     |
 # 28     |               29     |
  # |     3 ---- 13 ---- 12|---- 2
  # |    /                 |    /
  # |  14                  |   11
 # 24  /                  25  /
  # | 15                   | 10
  # |/                     |/
  # 0 ----  8 ----  9 ---- 1
# ~#
# class Hexa_32
    # static vtk_num  := -1 # TODO
    # static points   := [[0,0,0],[1,0,0],[1,1,0],[0,1,0],
                        # [0,0,1],[1,0,1],[1,1,1],[0,1,1],
                        # [1/3,0,0],[2/3,0,0],[1,1/3,0],[1,2/3,0],[2/3,1,0],[1/3,1,0],[0,2/3,0],[0,1/3,0],
                        # [1/3,0,1],[2/3,0,1],[1,1/3,1],[1,2/3,1],[2/3,1,1],[1/3,1,1],[0,2/3,1],[0,1/3,1],
                        # [0,0,1/3],[1,0,1/3],[1,1,1/3],[0,1,1/3],
                        # [0,0,2/3],[1,0,2/3],[1,1,2/3],[0,1,2/3]]
    # static children := [(Quad_12,[0,1,2,3,8,9,10,11,12,13,14,15]),(Quad_12,[4,5,6,7,16,17,18,19,20,21,22,23]),
                        # (Quad_12,[0,1,5,4,8,9,25,29,17,16,28,24]),(Quad_12,[1,2,6,5,10,11,26,30,19,18,29,25]),
                        # (Quad_12,[3,2,6,7,13,12,26,30,20,21,31,27]),(Quad_12,[0,3,7,4,15,14,27,31,22,23,28,24])]
    # static def interval_var_inter( vi )
        # return [ [0,1], [0,1], [0,1] ]
    # static def get_order_interpolation
        # return [ 3, 3, 3 ]

# #~
          # 7 ---28---27----26---- 6
         # /|                     /|
       # 29 |                   25 |
       # /  43                  / 42
     # 30   |                  24  | 
     # /    |                 /    |
   # 31    39                23   38
   # /      |               /      |
  # 4 ---20---21----22---- 5       |
  # |      35              |      34 
  # |       |              |       |
 # 40       |             41       |
  # |       3 ---16---15---|14---- 2
  # |      /               |      /
 # 36    17               37     13
  # |    /                 |    /
  # |  18                  |   12
 # 32  /                  33  /
  # | 19                   | 11
  # |/                     |/
  # 0 ----8----9----10---- 1
# ~#
# class Hexa_44
    # static vtk_num  := -1 # TODO
    # static points   := [[0,0,0],[1,0,0],[1,1,0],[0,1,0],
                        # [0,0,1],[1,0,1],[1,1,1],[0,1,1],
                        # [1/4,0,0],[1/2,0,0],[3/4,0,0],[1,1/4,0],[1,1/2,0],[1,3/4,0],[3/4,1,0],[1/2,1,0],[1/4,1,0],[0,3/4,0],[0,1/2,0],[0,1/4,0],
                        # [1/4,0,1],[1/2,0,1],[3/4,0,1],[1,1/4,1],[1,1/2,1],[1,3/4,1],[3/4,1,1],[1/2,1,1],[1/4,1,1],[0,3/4,1],[0,1/2,1],[0,1/4,1],
                        # [0,0,1/4],[1,0,1/4],[1,1,1/4],[0,1,1/4],
                        # [0,0,1/2],[1,0,1/2],[1,1,1/2],[0,1,1/2],
                        # [0,0,3/4],[1,0,3/4],[1,1,3/4],[0,1,3/4]]
    # static children := [(Quad_16,[0,1,2,3,8,9,10,11,12,13,14,15,16,17,18,19]),(Quad_16,[4,5,6,7,20,21,22,23,24,25,26,27,28,29,30,31]),
                        # (Quad_16,[0,1,5,4,8,9,10,33,37,41,22,21,20,40,36,32]),(Quad_16,[1,2,6,5,11,12,13,34,38,42,25,24,23,41,37,33]),
                        # (Quad_16,[3,2,6,7,16,15,14,34,38,42,26,27,28,43,39,35]),(Quad_16,[0,3,7,4,19,18,17,35,39,43,29,30,31,40,36,32])]
    # static def interval_var_inter( vi )
        # return [ [0,1], [0,1], [0,1] ]
    # static def get_order_interpolation
        # return [ 4, 4, 4 ]

class HexaGeneric[ n ] inherits Hexa
    static vtk_num  := -1 # TODO
    static points   := Vec[ Vec[ Rationnal, 3 ] ]()
    for k in 0 .. n+1
        for j in 0 .. n+1
            for i in 0 .. n+1
                points.push_back( [ i/n, j/n, k/n ] )
    # static children := [ # Generic[n]
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        # ( QuadGeneric[ n ], Vec[ Int32 ](  ) )
    # ]
    # static def get_order_interpolation
        # return [ n, n, n ]

#~ 
 3n-1   3n  3n+1 3n+2  4n-1   
    x----x----x----x----x
    |                   |
 n+5x                   xn+6
    |                   |
 n+3x                   xn+4
    |                   |
 n+1x                   xn+2
    |                   |
    x----x----x----x----x
    0    1    2    3    n
~#
class QuadSerendip[ n ] inherits NameElement
    static vtk_num  := -1 # TODO
    #
    static points   := Vec[ Vec[ Rationnal, 2 ] ]()
    for i in 0 .. n+1
        points.push_back( [ i/n, 0 ] )
    for i in 1 .. n
        points.push_back( [ 0, i/n ] )
        points.push_back( [ 1, i/n ] )
    for i in 0 .. n+1
        points.push_back( [ i/n, 1 ] )
    #
    static children := [ # Generic[n]
        ( BarGeneric[ n ], Vec[ Int32 ](              0 .. n + 1                 ) ),
        ( BarGeneric[ n ], Vec[ Int32 ](    n + 2 * (0..n) +++ [ 4 * n - 1 ]     ) ),
        ( BarGeneric[ n ], Vec[ Int32 ](    ( 3 * n - 1 .. 4 * n ).reversed      ) ),
        ( BarGeneric[ n ], Vec[ Int32 ]( ( [0] +++ n + 1 + 2 * (0..n) ).reversed ) )
    ]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1] ]
    static def get_order_interpolation
        return [ n, n ]
        
        
#~
                       
        28 ---- 29 ---- 30 ----31
        /|                     /|
      26 |                   27 |
      /  18                  /  19 
    24   |                 25   |
    /    |                 /    |   
  20 -----21 ---- 22 ----23     |
   |    14                |    15 
   |     |                |     |
  16     |               17     |
   |     8 ----  9 ---- 10|----11
   |    /                 |    /
   |   6                  |   7
  12  /                  13  /   
   | 4                    | 5
   |/                     |/
   0 ----  1 ----  2 ---- 3
                
~#
class HexaSerendip[ n ] inherits NameElement
    static vtk_num  := -1 # TODO
    #
    a1 := 0 .. n+1
    a2 := n + 2 * (0..n) +++ [ 4 * n - 1 ]
    a3 := ( 3 * n - 1 .. 4 * n ).reversed 
    a4 := ( [0] +++ n + 1 + 2 * (0..n) ).reversed
    a5 := a1 + 4*(2*n-1)
    a6 := a2 + 4*(2*n-1)
    a7 := a3 + 4*(2*n-1)
    a8 := a4 + 4*(2*n-1)
    a9 := [0] +++ 4 * n + 4 * (0..n-1)     +++ [4*(2*n-1)]
    a10:= [n] +++ 4 * n + 4 * (0..n-1) + 1 +++ [4*(2*n-1)+n]
    a11:= [4*n-1] +++ 4 * n + 4 * (0..n-1) + 3 +++ [4*(2*n-1)+4*n-1]
    a12:= [3*n-1] +++ 4 * n + 4 * (0..n-1) + 2 +++ [4*(2*n-1)+3*n-1]
    
    q1 := a4.reversed +++ a3.reversed +++ a2.reversed +++ a1.reversed
    q2 := a5 +++ a6 +++ a7 +++ a8
    q3 := a9 +++ a8.reversed +++ a12.reversed +++ a4
    q4 := a2 +++ a11 +++ a6.reversed +++ a10.reversed
    q5 := a1 +++ a10 +++ a5.reversed +++ a9.reversed
    q6 := a12 +++ a7.reversed +++ a11.reversed +++ a3

    
    static points   := Vec[ Vec[ Rationnal, 2 ] ]()
    for i in 0 .. n+1
        points.push_back( [ i/n, 0 ] )
    for i in 1 .. n
        points.push_back( [ 0, i/n ] )
        points.push_back( [ 1, i/n ] )
    for i in 0 .. n+1
        points.push_back( [ i/n, 1 ] )
    #
    static children := [ # Generic[n]
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) ),
        ( QuadGeneric[ n ], Vec[ Int32 ](  ) )
    ]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1], [0,1] ]
    static def get_order_interpolation
        return [ n, n, n ]

#~
     5
    /|\
   / | \
  /  |  \
 3_______4
 |   |   |
 |   2   |
 |  / \  |
 | /   \ |
 |/     \|
 0______ 1

~#
class Wedge inherits NameElement
    property has_a_var_inter_is_inside_method
    static vtk_num  := 10
    static points   := [[0,0,0],[1,0,0],[0,1,0],[0,0,1],[1,0,1],[0,1,1]]
    static children := [(Quad,[0,1,4,3]),(Quad,[0,3,5,2]),(Quad,[1,2,5,4]),(Triangle,[0,2,1]),(Triangle,[3,4,5])]
    static def interval_var_inter( vi )
        return [ [0,1], [0,1-vi[0]], [0,1] ]
    static def var_inter_is_inside( vi, tol = 0 )
        return heaviside( tol + vi[0] ) * heaviside( tol + vi[1] ) * heaviside( tol + 1 - vi[0] - vi[1] ) * heaviside( tol + vi[2] ) * heaviside( tol + 1 - vi[2] )
    static def get_order_interpolation
        return [ 1, 1, 1 ]
    static def gauss_integration( expr, order, var_inter )
        nb_pts_gauss := 6
        val_vi_0 := [ 0.0, 0.5, 0.5, 0.0, 0.5, 0.5 ]
        val_vi_1 := [ 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 ]
        val_vi_2 := [ 0.211324865405, 0.211324865405, 0.211324865405, 0.788675134595, 0.788675134595, 0.788675134595 ]
        pond := [ 0.083333333333333, 0.083333333333333, 0.083333333333333, 0.083333333333333, 0.083333333333333, 0.083333333333333 ]
        res := Op( 0 )
        for i in 0 .. nb_pts_gauss
            res += pond[i] * expr.subs( var_inter, [ val_vi_0[i], val_vi_1[i], val_vi_2[i] ] )
        return res

#~
     14
    /|\
  12 | 13
  /  8  \
 9__10___11
 |   |   |
 |   5   |
 6  / \  7
 | 3   4 |
 |/     \|
 0___1__ 2

~#
class Wedge_15 inherits Wedge
    static vtk_num  := -1
    static points   := [
        [0,0,0.0],[0.5,0,0.0],[1,0,0.0],[0,0.5,0.0],[0.5,0.5,0.0],[0,1,0.0],
        [0,0,0.5],            [1,0,0.5],                          [0,1,0.5],
        [0,0,1.0],[0.5,0,1.0],[1,0,1.0],[0,0.5,1.0],[0.5,0.5,1.0],[0,1,1.0]
    ]
    static children := [ (Triangle_6,[0,3,5,1,4,2]), (Triangle_6,[9,10,11,12,13,14]), (Quad_8,[0,1,2,6,7,9,10,11]), (Quad_8,[0,6,9,3,12,5,8,14]), (Quad_8,[5,8,14,4,13,2,7,11]) ]
    static def get_order_interpolation
        return [ 2, 2, 2 ]

#~
     17
    /|\
  15 | 16
  / 11  \
12__13___14
 | 9 | 10|
 |   5   |
 6  /7\  8
 | 3   4 |
 |/     \|
 0___1__ 2

~#
class Wedge_18 inherits Wedge
    static vtk_num  := -1
    static points   := [
        [0,0,0.0],[0.5,0,0.0],[1,0,0.0],[0,0.5,0.0],[0.5,0.5,0.0],[0,1,0.0],
        [0,0,0.5],[0.5,0,0.5],[1,0,0.5],[0,0.5,0.5],[0.5,0.5,0.5],[0,1,0.5],
        [0,0,1.0],[0.5,0,1.0],[1,0,1.0],[0,0.5,1.0],[0.5,0.5,1.0],[0,1,1.0]
    ]
    static children := [(Triangle_6,[0,3,7,1,4,2]),(Triangle_6,[12,13,14,15,16,17]), (Quad_9,[0,1,2,6,7,8,12,13,14]), (Quad_9,[0,6,12,3,9,15,5,11,17]), (Quad_9,[5,11,17,4,10,16,2,8,14]) ]
    static def get_order_interpolation
        return [ 2, 2, 2 ]

#~
~#
class Pyramid inherits NameElement
    static vtk_num  := -1
    static points   := [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[0.5,0.5,0.5]]
    static children := [ (Quad,[0,1,2,3]), (Triangle,[0,4,1]), (Triangle,[1,4,3]), (Triangle,[3,4,2]), (Triangle,[2,4,0]) ]
    static def interval_var_inter( vi )
        return [ [0,0.5], [vi[0],1-vi[0]], [vi[0],1-vi[0]] ]
    static def get_order_interpolation
        return [ 1, 1, 1 ]

#~
~#
class Pyramid_13 inherits Pyramid
    static points   := [ 
        [0/2,0/2,0/2], [0/2,0/2,1/2], [0/2,0/2,2/2],
        [0/2,1/2,0/2],                [0/2,1/2,2/2],
        [0/2,2/2,0/2], [0/2,2/2,1/2], [0/2,2/2,2/2],
        
        [1/2,1/4,1/4], [1/2,1/4,3/4], [1/2,3/4,1/4], [1/2,3/4,3/4], 
        
        [1/2,1/2,1/2]
    ]
    static children := [ (Quad_8,[0,1,2,3,4,5,6,7]), (Triangle_6,[2,1,0,9,8,12]), (Triangle_6,[7,4,2,11,9,12]), (Triangle_6,[5,6,7,10,11,12]), (Triangle_6,[0,3,5,8,10,12]) ]
    static def get_order_interpolation
        return [ 2, 2, 2 ]

#~
~#
class Pyramid_14 inherits Pyramid
    static points   := [ 
        [0/2,0/2,0/2], [0/2,0/2,1/2], [0/2,0/2,2/2],
        [0/2,1/2,0/2], [0/2,1/2,1/2], [0/2,1/2,2/2],
        [0/2,2/2,0/2], [0/2,2/2,1/2], [0/2,2/2,2/2],
        
        [1/2,1/4,1/4], [1/2,1/4,3/4], [1/2,3/4,1/4], [1/2,3/4,3/4], 
        
        [1/2,1/2,1/2]
    ]
    static children := [ (Quad_9,[0,1,2,3,4,5,6,7,8]), (Triangle_6,[2,1,0,10,9,13]), (Triangle_6,[8,5,2,12,10,13]), (Triangle_6,[6,7,8,11,12,13]), (Triangle_6,[0,3,6,9,11,13]) ]
    static def get_order_interpolation
        return [ 2, 2, 2 ]

        
        
